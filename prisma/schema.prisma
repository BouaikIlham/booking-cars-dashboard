// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id String @id @default(uuid())
  name String
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  billboards Billboard [] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  orders Order[] @relation("StoreToOrder")
  cars Car[] @relation("StoreToCar")
}

model Billboard {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label String
  imageUrl String
  categories Category[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([storeId])
}


model Category {
  id String @id @default(uuid())
  storeId String // Foreign Key to Store
  store Store @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String // Foreign Key to Billboard
  billboard   Billboard   @relation(fields: [billboardId], references: [id])
  name String
  cars Car[] @relation("CategoryToCar")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([billboardId])
  @@index([storeId])
}

model Car {
  id String @id @default(uuid())
  storeId String 
  store Store @relation("StoreToCar", fields: [storeId], references: [id])
  categoryId String
  category Category @relation("CategoryToCar", fields: [categoryId], references: [id])
  model String
  mileage String
  capicity String
  transmission String
  isAvailable Boolean
  description String
  price Decimal
  images Image[]
  orderItems  OrderItem[]   // Relation to Order model
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])

}

model Image {
  id String @id @default(uuid())
  carId String
  car Car  @relation(fields: [carId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
  @@index([carId])

}

model Order {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])

}

// Intermediary for a many-to-many relationship
 
model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  carId String
  car Car @relation(fields: [carId], references: [id])

  @@index([carId])
  @@index([orderId])
  
}